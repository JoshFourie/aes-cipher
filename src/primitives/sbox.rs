use std::ops;
use crate::primitives::byte;

// substitution box reads in col-major order.
pub struct SubBox([byte::Byte; 256]);

impl SubBox {
    pub fn substitute(&self, target: byte::Byte) -> byte::Byte {
        self[target]
    }
}

impl ops::Index<u8> for SubBox {
    type Output = byte::Byte;

    fn index(&self, idx: u8) -> &Self::Output {
        &self.0[idx as usize]
    }
}

impl ops::Index<byte::Byte> for SubBox {
    type Output = byte::Byte;

    fn index(&self, idx: byte::Byte) -> &Self::Output {
        &self.0[idx.as_inner() as usize]
    }
}

impl<'a> ops::Index<byte::Byte> for &'a SubBox {
    type Output = byte::Byte;

    fn index(&self, idx: byte::Byte) -> &Self::Output {
        &self.0[idx.as_inner() as usize]
    }
}

impl From<[byte::Byte; 256]> for SubBox {
    fn from(arr: [byte::Byte; 256]) -> Self {
        SubBox(arr)
    }
}

impl Default for SubBox {
    fn default() -> Self {
        let buf: [byte::Byte; 256] = [
            0x63.into(), 0x7c.into(), 0x77.into(), 0x7b.into(), 0xf2.into(), 0x6b.into(), 0x6f.into(), 0xc5.into(), 0x30.into(), 0x01.into(), 0x67.into(), 0x2b.into(), 0xfe.into(), 0xd7.into(), 0xab.into(), 0x76.into(),
            0xca.into(), 0x82.into(), 0xc9.into(), 0x7d.into(), 0xfa.into(), 0x59.into(), 0x47.into(), 0xf0.into(), 0xad.into(), 0xd4.into(), 0xa2.into(), 0xaf.into(), 0x9c.into(), 0xa4.into(), 0x72.into(), 0xc0.into(),
            0xb7.into(), 0xfd.into(), 0x93.into(), 0x26.into(), 0x36.into(), 0x3f.into(), 0xf7.into(), 0xcc.into(), 0x34.into(), 0xa5.into(), 0xe5.into(), 0xf1.into(), 0x71.into(), 0xd8.into(), 0x31.into(), 0x15.into(),
            0x04.into(), 0xc7.into(), 0x23.into(), 0xc3.into(), 0x18.into(), 0x96.into(), 0x05.into(), 0x9a.into(), 0x07.into(), 0x12.into(), 0x80.into(), 0xe2.into(), 0xeb.into(), 0x27.into(), 0xb2.into(), 0x75.into(),
            0x09.into(), 0x83.into(), 0x2c.into(), 0x1a.into(), 0x1b.into(), 0x6e.into(), 0x5a.into(), 0xa0.into(), 0x52.into(), 0x3b.into(), 0xd6.into(), 0xb3.into(), 0x29.into(), 0xe3.into(), 0x2f.into(), 0x84.into(),
            0x53.into(), 0xd1.into(), 0x00.into(), 0xed.into(), 0x20.into(), 0xfc.into(), 0xb1.into(), 0x5b.into(), 0x6a.into(), 0xcb.into(), 0xbe.into(), 0x39.into(), 0x4a.into(), 0x4c.into(), 0x58.into(), 0xcf.into(),
            0xd0.into(), 0xef.into(), 0xaa.into(), 0xfb.into(), 0x43.into(), 0x4d.into(), 0x33.into(), 0x85.into(), 0x45.into(), 0xf9.into(), 0x02.into(), 0x7f.into(), 0x50.into(), 0x3c.into(), 0x9f.into(), 0xa8.into(),
            0x51.into(), 0xa3.into(), 0x40.into(), 0x8f.into(), 0x92.into(), 0x9d.into(), 0x38.into(), 0xf5.into(), 0xbc.into(), 0xb6.into(), 0xda.into(), 0x21.into(), 0x10.into(), 0xff.into(), 0xf3.into(), 0xd2.into(),
            0xcd.into(), 0x0c.into(), 0x13.into(), 0xec.into(), 0x5f.into(), 0x97.into(), 0x44.into(), 0x17.into(), 0xc4.into(), 0xa7.into(), 0x7e.into(), 0x3d.into(), 0x64.into(), 0x5d.into(), 0x19.into(), 0x73.into(),
            0x60.into(), 0x81.into(), 0x4f.into(), 0xdc.into(), 0x22.into(), 0x2a.into(), 0x90.into(), 0x88.into(), 0x46.into(), 0xee.into(), 0xb8.into(), 0x14.into(), 0xde.into(), 0x5e.into(), 0x0b.into(), 0xdb.into(),
            0xe0.into(), 0x32.into(), 0x3a.into(), 0x0a.into(), 0x49.into(), 0x06.into(), 0x24.into(), 0x5c.into(), 0xc2.into(), 0xd3.into(), 0xac.into(), 0x62.into(), 0x91.into(), 0x95.into(), 0xe4.into(), 0x79.into(),
            0xe7.into(), 0xc8.into(), 0x37.into(), 0x6d.into(), 0x8d.into(), 0xd5.into(), 0x4e.into(), 0xa9.into(), 0x6c.into(), 0x56.into(), 0xf4.into(), 0xea.into(), 0x65.into(), 0x7a.into(), 0xae.into(), 0x08.into(),
            0xba.into(), 0x78.into(), 0x25.into(), 0x2e.into(), 0x1c.into(), 0xa6.into(), 0xb4.into(), 0xc6.into(), 0xe8.into(), 0xdd.into(), 0x74.into(), 0x1f.into(), 0x4b.into(), 0xbd.into(), 0x8b.into(), 0x8a.into(),
            0x70.into(), 0x3e.into(), 0xb5.into(), 0x66.into(), 0x48.into(), 0x03.into(), 0xf6.into(), 0x0e.into(), 0x61.into(), 0x35.into(), 0x57.into(), 0xb9.into(), 0x86.into(), 0xc1.into(), 0x1d.into(), 0x9e.into(),
            0xe1.into(), 0xf8.into(), 0x98.into(), 0x11.into(), 0x69.into(), 0xd9.into(), 0x8e.into(), 0x94.into(), 0x9b.into(), 0x1e.into(), 0x87.into(), 0xe9.into(), 0xce.into(), 0x55.into(), 0x28.into(), 0xdf.into(),
            0x8c.into(), 0xa1.into(), 0x89.into(), 0x0d.into(), 0xbf.into(), 0xe6.into(), 0x42.into(), 0x68.into(), 0x41.into(), 0x99.into(), 0x2d.into(), 0x0f.into(), 0xb0.into(), 0x54.into(), 0xbb.into(), 0x16.into(),
        ];
        Self::from(buf)
    }
}

pub struct ReverseSubBox([byte::Byte; 256]);

impl ReverseSubBox {
    pub fn substitute(&self, target: byte::Byte) -> byte::Byte {
        self[target]
    }
}

impl ops::Index<u8> for ReverseSubBox {
    type Output = byte::Byte;

    fn index(&self, idx: u8) -> &Self::Output {
        &self.0[idx as usize]
    }
}

impl ops::Index<byte::Byte> for ReverseSubBox {
    type Output = byte::Byte;

    fn index(&self, idx: byte::Byte) -> &Self::Output {
        &self.0[idx.as_inner() as usize]
    }
}

impl<'a> ops::Index<byte::Byte> for &'a ReverseSubBox {
    type Output = byte::Byte;

    fn index(&self, idx: byte::Byte) -> &Self::Output {
        &self.0[idx.as_inner() as usize]
    }
}

impl From<[byte::Byte; 256]> for ReverseSubBox {
    fn from(arr: [byte::Byte; 256]) -> Self {
        ReverseSubBox(arr)
    }
}

impl Default for ReverseSubBox {
    fn default() -> Self {
        let buf: [byte::Byte; 256] = [
            0x52.into(), 0x09.into(), 0x6a.into(), 0xd5.into(), 0x30.into(), 0x36.into(), 0xa5.into(), 0x38.into(), 0xbf.into(), 0x40.into(), 0xa3.into(), 0x9e.into(), 0x81.into(), 0xf3.into(), 0xd7.into(), 0xfb.into(),
            0x7c.into(), 0xe3.into(), 0x39.into(), 0x82.into(), 0x9b.into(), 0x2f.into(), 0xff.into(), 0x87.into(), 0x34.into(), 0x8e.into(), 0x43.into(), 0x44.into(), 0xc4.into(), 0xde.into(), 0xe9.into(), 0xcb.into(),
            0x54.into(), 0x7b.into(), 0x94.into(), 0x32.into(), 0xa6.into(), 0xc2.into(), 0x23.into(), 0x3d.into(), 0xee.into(), 0x4c.into(), 0x95.into(), 0x0b.into(), 0x42.into(), 0xfa.into(), 0xc3.into(), 0x4e.into(),
            0x08.into(), 0x2e.into(), 0xa1.into(), 0x66.into(), 0x28.into(), 0xd9.into(), 0x24.into(), 0xb2.into(), 0x76.into(), 0x5b.into(), 0xa2.into(), 0x49.into(), 0x6d.into(), 0x8b.into(), 0xd1.into(), 0x25.into(),
            0x72.into(), 0xf8.into(), 0xf6.into(), 0x64.into(), 0x86.into(), 0x68.into(), 0x98.into(), 0x16.into(), 0xd4.into(), 0xa4.into(), 0x5c.into(), 0xcc.into(), 0x5d.into(), 0x65.into(), 0xb6.into(), 0x92.into(),
            0x6c.into(), 0x70.into(), 0x48.into(), 0x50.into(), 0xfd.into(), 0xed.into(), 0xb9.into(), 0xda.into(), 0x5e.into(), 0x15.into(), 0x46.into(), 0x57.into(), 0xa7.into(), 0x8d.into(), 0x9d.into(), 0x84.into(),
            0x90.into(), 0xd8.into(), 0xab.into(), 0x00.into(), 0x8c.into(), 0xbc.into(), 0xd3.into(), 0x0a.into(), 0xf7.into(), 0xe4.into(), 0x58.into(), 0x05.into(), 0xb8.into(), 0xb3.into(), 0x45.into(), 0x06.into(),
            0xd0.into(), 0x2c.into(), 0x1e.into(), 0x8f.into(), 0xca.into(), 0x3f.into(), 0x0f.into(), 0x02.into(), 0xc1.into(), 0xaf.into(), 0xbd.into(), 0x03.into(), 0x01.into(), 0x13.into(), 0x8a.into(), 0x6b.into(),
            0x3a.into(), 0x91.into(), 0x11.into(), 0x41.into(), 0x4f.into(), 0x67.into(), 0xdc.into(), 0xea.into(), 0x97.into(), 0xf2.into(), 0xcf.into(), 0xce.into(), 0xf0.into(), 0xb4.into(), 0xe6.into(), 0x73.into(),
            0x96.into(), 0xac.into(), 0x74.into(), 0x22.into(), 0xe7.into(), 0xad.into(), 0x35.into(), 0x85.into(), 0xe2.into(), 0xf9.into(), 0x37.into(), 0xe8.into(), 0x1c.into(), 0x75.into(), 0xdf.into(), 0x6e.into(),
            0x47.into(), 0xf1.into(), 0x1a.into(), 0x71.into(), 0x1d.into(), 0x29.into(), 0xc5.into(), 0x89.into(), 0x6f.into(), 0xb7.into(), 0x62.into(), 0x0e.into(), 0xaa.into(), 0x18.into(), 0xbe.into(), 0x1b.into(),
            0xfc.into(), 0x56.into(), 0x3e.into(), 0x4b.into(), 0xc6.into(), 0xd2.into(), 0x79.into(), 0x20.into(), 0x9a.into(), 0xdb.into(), 0xc0.into(), 0xfe.into(), 0x78.into(), 0xcd.into(), 0x5a.into(), 0xf4.into(),
            0x1f.into(), 0xdd.into(), 0xa8.into(), 0x33.into(), 0x88.into(), 0x07.into(), 0xc7.into(), 0x31.into(), 0xb1.into(), 0x12.into(), 0x10.into(), 0x59.into(), 0x27.into(), 0x80.into(), 0xec.into(), 0x5f.into(),
            0x60.into(), 0x51.into(), 0x7f.into(), 0xa9.into(), 0x19.into(), 0xb5.into(), 0x4a.into(), 0x0d.into(), 0x2d.into(), 0xe5.into(), 0x7a.into(), 0x9f.into(), 0x93.into(), 0xc9.into(), 0x9c.into(), 0xef.into(),
            0xa0.into(), 0xe0.into(), 0x3b.into(), 0x4d.into(), 0xae.into(), 0x2a.into(), 0xf5.into(), 0xb0.into(), 0xc8.into(), 0xeb.into(), 0xbb.into(), 0x3c.into(), 0x83.into(), 0x53.into(), 0x99.into(), 0x61.into(),
            0x17.into(), 0x2b.into(), 0x04.into(), 0x7e.into(), 0xba.into(), 0x77.into(), 0xd6.into(), 0x26.into(), 0xe1.into(), 0x69.into(), 0x14.into(), 0x63.into(), 0x55.into(), 0x21.into(), 0x0c.into(), 0x7d.into(),
    ];
        Self::from(buf)
    }
}

#[cfg(test)]
mod test {

    use super::*;

    #[test]
    fn test_index() {
        let sbox: _ = SubBox::default();
        assert_eq!(byte::Byte::from(0xea), sbox[0xbb]);
        assert_eq!(byte::Byte::from(0x8c), sbox[0xf0]);
        assert_eq!(byte::Byte::from(0x24), sbox[0xa6]);
        assert_eq!(byte::Byte::from(0xbc), sbox[0x78]);
    }

    #[test]
    fn test_substitute() {
        let sbox: _ = SubBox::default();
        assert_eq!(byte::Byte::from(0xea), sbox.substitute(byte::Byte::from(0xbb)));
        assert_eq!(byte::Byte::from(0x8c), sbox.substitute(byte::Byte::from(0xf0)));
        assert_eq!(byte::Byte::from(0x24), sbox.substitute(byte::Byte::from(0xa6)));
        assert_eq!(byte::Byte::from(0xbc), sbox.substitute(byte::Byte::from(0x78)));
    }

    #[test]
    fn test_reverse_substitute() {
        let rsbox: _ = ReverseSubBox::default();
        assert_eq!(byte::Byte::from(0x96), rsbox.substitute(byte::Byte::from(0x90)));
        assert_eq!(byte::Byte::from(0x1a), rsbox.substitute(byte::Byte::from(0xa2)));
        assert_eq!(byte::Byte::from(0xe0), rsbox.substitute(byte::Byte::from(0xe1)));
        assert_eq!(byte::Byte::from(0x07), rsbox.substitute(byte::Byte::from(0xc5)));
    }

}
